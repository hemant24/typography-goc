if (typeof define !== 'function') { 	var define = require('amdefine')(module)}define(function(require) {var WaveSurfer = require('wavesurfer');'use strict';/* Regions manager */WaveSurfer.FramesRegions = {    init: function (wavesurfer) {        this.wavesurfer = wavesurfer;        this.wrapper = this.wavesurfer.drawer.wrapper;		console.log('called frames regions construct')        /* Id-based hash of regions. */        this.list = {};    },    /* Remove a region. */    add: function (params) {        var region = Object.create(WaveSurfer.FramesRegion);        region.init(params, this.wavesurfer);        this.list[region.id] = region;        region.on('remove', (function () {            delete this.list[region.id];        }).bind(this));        return region;    },    /* Remove all regions. */    clear: function () {        Object.keys(this.list).forEach(function (id) {            this.list[id].remove();        }, this);    },    enableDragSelection: function (params) {        var my = this;        var drag;        var start;        var region;        this.wrapper.addEventListener('mousedown', function (e) {            drag = true;            start = my.wavesurfer.drawer.handleEvent(e);            region = null;        });        this.wrapper.addEventListener('mouseup', function () {            drag = false;            region = null;        });        this.wrapper.addEventListener('mousemove', function (e) {            if (!drag) { return; }            if (!region) {                region = my.add(params || {});            }            var duration = my.wavesurfer.getDuration();            var end = my.wavesurfer.drawer.handleEvent(e);            region.update({                start: Math.min(end * duration, start * duration),                end: Math.max(end * duration, start * duration)            });        });    }};WaveSurfer.FramesRegion = {    /* Helper function to assign CSS styles. */    style: WaveSurfer.Drawer.style,    init: function (params, wavesurfer) {        this.wavesurfer = wavesurfer;        this.wrapper = wavesurfer.drawer.wrapper;        this.id = params.id == null ? WaveSurfer.util.getId() : params.id;        this.start = Number(params.start) || 0;        this.end = params.end == null ?            // small marker-like region            this.start + (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration() :            Number(params.end);        this.resize = params.resize === undefined ? true : Boolean(params.resize);        this.drag = params.drag === undefined ? true : Boolean(params.drag);        this.loop = Boolean(params.loop);        this.color = params.color || 'rgba(0, 0, 0, 0.1)';        this.data = params.data || {};        //this.bindInOut(); We don't want this        this.render();        this.wavesurfer.fireEvent('region-created', this);    },    /* Update region params. */    update: function (params) {        if (null != params.start) {            this.start = Number(params.start);        }        if (null != params.end) {            this.end = Number(params.end);        }        if (null != params.loop) {            this.color = Boolean(params.loop);        }        if (null != params.color) {            this.color = params.color;        }        if (null != params.data) {            this.data = params.data;        }        if (null != params.resize) {            this.data = Boolean(params.resize);        }        if (null != params.drag) {            this.data = Boolean(params.drag);        }        this.updateRender();        this.fireEvent('update');        this.wavesurfer.fireEvent('region-updated', this);    },    /* Remove a single region. */    remove: function (region) {        if (this.element) {            this.wrapper.removeChild(this.element);            this.element = null;            this.fireEvent('remove');            this.wavesurfer.fireEvent('region-removed', this);        }    },    /* Play the audio region. */    play: function () {        this.wavesurfer.play(this.start, this.end);        this.fireEvent('play');        this.wavesurfer.fireEvent('region-play', this);    },    /* Play the region in loop. */    playLoop: function () {        this.play();        this.once('out', this.playLoop.bind(this));    },    /* Render a region as a DOM element. */    render: function () {        var regionEl = document.createElement('frameregion');        regionEl.className = 'wavesurfer-region2';        //regionEl.title = this.formatTime(this.start, this.end);        var width = this.wrapper.scrollWidth;		var regionList = Object.keys(this.wavesurfer.framesRegions.list)		var wrapperHeight = this.getRealValueFromPixel($(this.wrapper).css('height'))		var lastAddedRegion =  this.wavesurfer.framesRegions.list[regionList[regionList.length - 1]]		var top = '0px'		if(lastAddedRegion){			var lastTop = this.getRealValueFromPixel($(lastAddedRegion.element).css('top'))			var delta = 25			top = lastTop + delta			if((top+16) >= wrapperHeight){				top = 0			}			top = top + 'px'		}				console.log('top' , top)        this.style(regionEl, {            position: 'absolute',            zIndex: 3,            height: '15px',            top:  top        });        /* Resize handles */        if (this.resize) {            //var handleLeft = regionEl.appendChild(document.createElement('handle'));            var handleRight = regionEl.appendChild(document.createElement('handle'));            //handleLeft.className = 'wavesurfer-handle wavesurfer-handle-start';            handleRight.className = 'wavesurfer-handle wavesurfer-handle-end';            var css = {                cursor: 'col-resize',                position: 'absolute',                left: '0px',                top: '0px',				'background-color' : 'black',                width: '1%',                maxWidth: '4px',                height: '100%'            };            //this.style(handleLeft, css);            this.style(handleRight, css);            this.style(handleRight, {                left: '100%'            });        }        this.element = this.wrapper.appendChild(regionEl);        this.updateRender();        this.bindEvents(regionEl);    },		getRealValueFromPixel : function(val){		return parseInt(val.split('px')[0])	},    formatTime: function (start, end) {        return (start == end ? [ start ] : [ start, end ]).map(function (time) {            return [                Math.floor((time % 3600) / 60), // minutes                ('00' + Math.floor(time % 60)).slice(-2) // seconds            ].join(':');        }).join('–');    },    /* Update element's position, width, color. */    updateRender: function () {        var dur = this.wavesurfer.getDuration();		var durInMilliSec = parseInt(dur * 1000)        var fillParentNoScroll = (!this.wavesurfer.params.scrollParent && this.wavesurfer.params.fillParent);        var width = fillParentNoScroll ? this.wavesurfer.drawer.getWidth() : this.wrapper.scrollWidth;        var milliSeconds = this.end - this.start;        if (this.start < 0) {          this.start = 0;          this.end = milliSeconds;        }        if (this.end > durInMilliSec) {          this.end = durInMilliSec;          this.start = durInMilliSec - milliSeconds;        }		        this.style(this.element, {            left: ~~(this.start / durInMilliSec * width) + 'px',            width: ~~((this.end / durInMilliSec - this.start / durInMilliSec) * width) + 'px',            backgroundColor: this.color,            cursor: this.drag ? 'move' : 'default'        });        this.element.title = this.formatTime(this.start, this.end);    },    /* Bind audio events. */    bindInOut: function () {        var my = this;        var onPlay = function () {            my.firedIn = false;            my.firedOut = false;        };        var onProcess = function (time) {            if (!my.firedIn && my.start <= time && my.end > time) {                my.firedIn = true;                my.fireEvent('in');                my.wavesurfer.fireEvent('region-in', my);            }            if (!my.firedOut && my.firedIn && my.end <= time) {                my.firedOut = true;                my.fireEvent('out');                my.wavesurfer.fireEvent('region-out', my);            }        };        this.wavesurfer.on('play', onPlay);        this.wavesurfer.backend.on('audioprocess', onProcess);        this.on('remove', function () {            my.wavesurfer.un('play', onPlay);            my.wavesurfer.backend.un('audioprocess', onProcess);        });        /* Loop playback. */        this.on('out', function () {            if (my.loop) {                my.wavesurfer.play(my.start);            }        });    },    /* Bind DOM events. */    bindEvents: function () {        var my = this;        this.element.addEventListener('mouseenter', function (e) {            my.fireEvent('mouseenter', e);            my.wavesurfer.fireEvent('frames-region-mouseenter', my, e);        });        this.element.addEventListener('mouseleave', function (e) {            my.fireEvent('mouseleave', e);            my.wavesurfer.fireEvent('frames-region-mouseleave', my, e);        });        this.element.addEventListener('click', function (e) {            e.preventDefault();            my.fireEvent('click', e);            my.wavesurfer.fireEvent('frames-region-click', my, e);        });        this.element.addEventListener('dblclick', function (e) {            e.stopPropagation();            e.preventDefault();            my.fireEvent('dblclick', e);            my.wavesurfer.fireEvent('frames-region-dblclick', my, e);        });        /* Drag or resize on mousemove. */        (this.drag || this.resize) && (function () {            var duration = my.wavesurfer.getDuration();            var drag;            var resize;            var startTime;			var startTimeInMilliSec;            var onDown = function (e) {                e.stopPropagation();                startTimeInMilliSec = parseInt(my.wavesurfer.drawer.handleEvent(e) * duration * 1000)				console.log('startTimeInMilliSec' , startTimeInMilliSec)                if (e.target.tagName.toLowerCase() == 'handle') {                    if (e.target.classList.contains('wavesurfer-handle-start')) {                        resize = 'start';                    } else {                        resize = 'end';                    }                } else {                    drag = true;                }            };            var onUp = function (e) {                if (drag || resize) {                    drag = false;                    resize = false;                    e.stopPropagation();                    e.preventDefault();                    my.fireEvent('frames-update-end');                    my.wavesurfer.fireEvent('frames-region-update-end', my);                }            };            var onMove = function (e) {				console.log('inside on move')                if (drag || resize) {                    //var time = my.wavesurfer.drawer.handleEvent(e) * duration;					var timeInMilliSec = parseInt(my.wavesurfer.drawer.handleEvent(e) * duration * 1000);                    var delta = timeInMilliSec - startTimeInMilliSec;                    startTimeInMilliSec = timeInMilliSec;                    // Drag                    if (my.drag && drag) {                        my.onDrag(delta);                    }                    // Resize                    if (my.resize && resize) {                        my.onResize(delta, resize);                    }                }            };            my.element.addEventListener('mousedown', onDown);            my.wrapper.addEventListener('mouseup', onUp);            my.wrapper.addEventListener('mousemove', onMove);            my.on('remove', function () {                my.wrapper.removeEventListener('mouseup', onUp);                my.wrapper.removeEventListener('mousemove', onMove);            });        }());    },    onDrag: function (delta) {        this.update({            start: this.start + delta,            end: this.end + delta        });    },    onResize: function (delta, direction) {        if (direction == 'start') {            this.update({                start: Math.min(this.start + delta, this.end),                end: Math.max(this.start + delta, this.end)            });        } else {            this.update({                start: Math.min(this.end + delta, this.start),                end: Math.max(this.end + delta, this.start)            });        }    }};WaveSurfer.util.extend(WaveSurfer.FramesRegion, WaveSurfer.Observer);/* Augment WaveSurfer with region methods. */WaveSurfer.initFramesRegions = function () {	console.log('this.frameRegions',this.framesRegions)    if (!this.framesRegions) {        this.framesRegions = Object.create(WaveSurfer.FramesRegions);        this.framesRegions.init(this);    }};WaveSurfer.addFramesRegion = function (options) {	console.log('inside add frames reginon')    this.initFramesRegions();    return this.framesRegions.add(options);};WaveSurfer.clearFramesRegions = function () {    this.framesRegions && this.framesRegions.clear();};WaveSurfer.enableFramesRegionDragSelection = function (options) {    this.initFramesRegions();    this.framesRegions.enableDragSelection(options);};});